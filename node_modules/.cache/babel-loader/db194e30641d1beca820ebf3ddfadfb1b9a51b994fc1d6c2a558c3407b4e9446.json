{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhija\\\\Downloads\\\\decentralized-mail\\\\src\\\\components\\\\SendMessage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { getWeb3, getContract } from '../utils/contract';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SendMessage = () => {\n  _s();\n  const [recipient, setRecipient] = useState('');\n  const [message, setMessage] = useState('');\n  const [image, setImage] = useState(null);\n  const [status, setStatus] = useState('');\n  const handleImageUpload = async e => {\n    const file = e.target.files[0];\n    setImage(file);\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'pinata_api_key': 'YOUR_PINATA_API_KEY',\n          'pinata_secret_api_key': 'YOUR_PINATA_SECRET_API_KEY'\n        }\n      });\n      const imageHash = response.data.IpfsHash;\n      setStatus(`Image uploaded: ${imageHash}`);\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      setStatus('Failed to upload image');\n    }\n  };\n  const sendMessage = async () => {\n    const web3 = await getWeb3();\n    const accounts = await web3.eth.getAccounts();\n    const contract = await getContract(web3);\n    try {\n      let content = message;\n      if (image) {\n        const formData = new FormData();\n        formData.append('file', image);\n        const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'pinata_api_key': 'YOUR_PINATA_API_KEY',\n            'pinata_secret_api_key': 'YOUR_PINATA_SECRET_API_KEY'\n          }\n        });\n        const imageHash = response.data.IpfsHash;\n        content += `\\nImage: https://gateway.pinata.cloud/ipfs/${imageHash}`;\n      }\n      await contract.methods.sendMessage(recipient, content).send({\n        from: accounts[0]\n      });\n      setStatus('Message sent successfully!');\n    } catch (error) {\n      console.error(error);\n      setStatus('Failed to send message');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Recipient Address\",\n      value: recipient,\n      onChange: e => setRecipient(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Message\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: status.includes('Failed') ? 'error' : 'status',\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(SendMessage, \"zbILxQLDkmlpG68EEuaUFBIiM8c=\");\n_c = SendMessage;\nexport default SendMessage;\nvar _c;\n$RefreshReg$(_c, \"SendMessage\");","map":{"version":3,"names":["React","useState","getWeb3","getContract","axios","jsxDEV","_jsxDEV","SendMessage","_s","recipient","setRecipient","message","setMessage","image","setImage","status","setStatus","handleImageUpload","e","file","target","files","formData","FormData","append","response","post","headers","imageHash","data","IpfsHash","error","console","sendMessage","web3","accounts","eth","getAccounts","contract","content","methods","send","from","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","onClick","includes","_c","$RefreshReg$"],"sources":["C:/Users/bhija/Downloads/decentralized-mail/src/components/SendMessage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { getWeb3, getContract } from '../utils/contract';\r\nimport axios from 'axios';\r\n\r\nconst SendMessage = () => {\r\n    const [recipient, setRecipient] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [image, setImage] = useState(null);\r\n    const [status, setStatus] = useState('');\r\n\r\n    const handleImageUpload = async (e) => {\r\n        const file = e.target.files[0];\r\n        setImage(file);\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        try {\r\n            const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'pinata_api_key': 'YOUR_PINATA_API_KEY',\r\n                    'pinata_secret_api_key': 'YOUR_PINATA_SECRET_API_KEY'\r\n                }\r\n            });\r\n\r\n            const imageHash = response.data.IpfsHash;\r\n            setStatus(`Image uploaded: ${imageHash}`);\r\n        } catch (error) {\r\n            console.error('Error uploading image:', error);\r\n            setStatus('Failed to upload image');\r\n        }\r\n    };\r\n\r\n    const sendMessage = async () => {\r\n        const web3 = await getWeb3();\r\n        const accounts = await web3.eth.getAccounts();\r\n        const contract = await getContract(web3);\r\n\r\n        try {\r\n            let content = message;\r\n            if (image) {\r\n                const formData = new FormData();\r\n                formData.append('file', image);\r\n\r\n                const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                        'pinata_api_key': 'YOUR_PINATA_API_KEY',\r\n                        'pinata_secret_api_key': 'YOUR_PINATA_SECRET_API_KEY'\r\n                    }\r\n                });\r\n\r\n                const imageHash = response.data.IpfsHash;\r\n                content += `\\nImage: https://gateway.pinata.cloud/ipfs/${imageHash}`;\r\n            }\r\n\r\n            await contract.methods.sendMessage(recipient, content).send({ from: accounts[0] });\r\n            setStatus('Message sent successfully!');\r\n        } catch (error) {\r\n            console.error(error);\r\n            setStatus('Failed to send message');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"Card\">\r\n            <h2>Send Message</h2>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Recipient Address\"\r\n                value={recipient}\r\n                onChange={(e) => setRecipient(e.target.value)}\r\n            />\r\n            <textarea\r\n                placeholder=\"Message\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n            ></textarea>\r\n            <input type=\"file\" onChange={handleImageUpload} />\r\n            <button onClick={sendMessage}>Send</button>\r\n            <p className={status.includes('Failed') ? 'error' : 'status'}>{status}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SendMessage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}