{"ast":null,"code":"import Web3 from 'web3';\nimport mailContractData from './DecentralizedMail.json';\nlet web3Instance;\nlet mailContract;\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    window.addEventListener('load', async () => {\n      if (web3Instance) return resolve(web3Instance);\n      if (window.ethereum) {\n        web3Instance = new Web3(window.ethereum);\n        try {\n          await window.ethereum.enable();\n          resolve(web3Instance);\n        } catch (error) {\n          reject(error);\n        }\n      } else if (window.web3) {\n        web3Instance = new Web3(window.web3.currentProvider);\n        resolve(web3Instance);\n      } else {\n        const provider = new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co');\n        web3Instance = new Web3(provider);\n        resolve(web3Instance);\n      }\n    });\n  });\n};\nconst getContract = async web3 => {\n  if (mailContract) return mailContract;\n  const networkId = '31'; // RSK Testnet network ID\n  const deployedNetwork = mailContractData.networks[networkId];\n  if (!deployedNetwork) {\n    throw new Error('Contract not deployed on the RSK Testnet');\n  }\n  mailContract = new web3.eth.Contract(mailContractData.abi, deployedNetwork.address);\n  return mailContract;\n};\nexport { getWeb3, getContract };","map":{"version":3,"names":["Web3","mailContractData","web3Instance","mailContract","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","enable","error","web3","currentProvider","provider","providers","HttpProvider","getContract","networkId","deployedNetwork","networks","Error","eth","Contract","abi","address"],"sources":["C:/Users/bhija/Downloads/decentralized-mail/src/utils/contract.js"],"sourcesContent":["import Web3 from 'web3';\r\nimport mailContractData from './DecentralizedMail.json';\r\n\r\nlet web3Instance;\r\nlet mailContract;\r\n\r\nconst getWeb3 = () => {\r\n    return new Promise((resolve, reject) => {\r\n        window.addEventListener('load', async () => {\r\n            if (web3Instance) return resolve(web3Instance);\r\n\r\n            if (window.ethereum) {\r\n                web3Instance = new Web3(window.ethereum);\r\n                try {\r\n                    await window.ethereum.enable();\r\n                    resolve(web3Instance);\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n            } else if (window.web3) {\r\n                web3Instance = new Web3(window.web3.currentProvider);\r\n                resolve(web3Instance);\r\n            } else {\r\n                const provider = new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co');\r\n                web3Instance = new Web3(provider);\r\n                resolve(web3Instance);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nconst getContract = async (web3) => {\r\n    if (mailContract) return mailContract;\r\n\r\n    const networkId = '31'; // RSK Testnet network ID\r\n    const deployedNetwork = mailContractData.networks[networkId];\r\n    if (!deployedNetwork) {\r\n        throw new Error('Contract not deployed on the RSK Testnet');\r\n    }\r\n    mailContract = new web3.eth.Contract(\r\n        mailContractData.abi,\r\n        deployedNetwork.address\r\n    );\r\n\r\n    return mailContract;\r\n};\r\n\r\nexport { getWeb3, getContract };\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,gBAAgB,MAAM,0BAA0B;AAEvD,IAAIC,YAAY;AAChB,IAAIC,YAAY;AAEhB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAClB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpCC,MAAM,CAACC,gBAAgB,CAAC,MAAM,EAAE,YAAY;MACxC,IAAIP,YAAY,EAAE,OAAOI,OAAO,CAACJ,YAAY,CAAC;MAE9C,IAAIM,MAAM,CAACE,QAAQ,EAAE;QACjBR,YAAY,GAAG,IAAIF,IAAI,CAACQ,MAAM,CAACE,QAAQ,CAAC;QACxC,IAAI;UACA,MAAMF,MAAM,CAACE,QAAQ,CAACC,MAAM,CAAC,CAAC;UAC9BL,OAAO,CAACJ,YAAY,CAAC;QACzB,CAAC,CAAC,OAAOU,KAAK,EAAE;UACZL,MAAM,CAACK,KAAK,CAAC;QACjB;MACJ,CAAC,MAAM,IAAIJ,MAAM,CAACK,IAAI,EAAE;QACpBX,YAAY,GAAG,IAAIF,IAAI,CAACQ,MAAM,CAACK,IAAI,CAACC,eAAe,CAAC;QACpDR,OAAO,CAACJ,YAAY,CAAC;MACzB,CAAC,MAAM;QACH,MAAMa,QAAQ,GAAG,IAAIf,IAAI,CAACgB,SAAS,CAACC,YAAY,CAAC,oCAAoC,CAAC;QACtFf,YAAY,GAAG,IAAIF,IAAI,CAACe,QAAQ,CAAC;QACjCT,OAAO,CAACJ,YAAY,CAAC;MACzB;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC;AAED,MAAMgB,WAAW,GAAG,MAAOL,IAAI,IAAK;EAChC,IAAIV,YAAY,EAAE,OAAOA,YAAY;EAErC,MAAMgB,SAAS,GAAG,IAAI,CAAC,CAAC;EACxB,MAAMC,eAAe,GAAGnB,gBAAgB,CAACoB,QAAQ,CAACF,SAAS,CAAC;EAC5D,IAAI,CAACC,eAAe,EAAE;IAClB,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;EAC/D;EACAnB,YAAY,GAAG,IAAIU,IAAI,CAACU,GAAG,CAACC,QAAQ,CAChCvB,gBAAgB,CAACwB,GAAG,EACpBL,eAAe,CAACM,OACpB,CAAC;EAED,OAAOvB,YAAY;AACvB,CAAC;AAED,SAASC,OAAO,EAAEc,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}