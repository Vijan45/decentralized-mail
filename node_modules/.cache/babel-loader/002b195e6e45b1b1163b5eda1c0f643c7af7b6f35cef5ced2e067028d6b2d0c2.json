{"ast":null,"code":"import Web3 from 'web3';\nimport mailContractData from './DecentralizedMail.json';\nlet web3Instance;\nlet mailContract;\nexport const initWeb3 = async () => {\n  if (web3Instance) return web3Instance;\n  if (window.ethereum) {\n    web3Instance = new Web3(window.ethereum);\n    try {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n    } catch (error) {\n      console.error('User denied account access');\n    }\n  } else if (window.web3) {\n    web3Instance = new Web3(window.web3.currentProvider);\n  } else {\n    const provider = new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co');\n    web3Instance = new Web3(provider);\n  }\n  return web3Instance;\n};\nexport const getWeb3 = () => {\n  return web3Instance;\n};\nexport const getContract = async () => {\n  if (mailContract) return mailContract;\n  const web3 = await initWeb3();\n  const networkId = '31'; // RSK Testnet network ID\n  const deployedNetwork = mailContractData.networks[networkId];\n  if (!deployedNetwork) {\n    throw new Error('Contract not deployed on the RSK Testnet');\n  }\n  mailContract = new web3.eth.Contract(mailContractData.abi, deployedNetwork.address);\n  return mailContract;\n};","map":{"version":3,"names":["Web3","mailContractData","web3Instance","mailContract","initWeb3","window","ethereum","request","method","error","console","web3","currentProvider","provider","providers","HttpProvider","getWeb3","getContract","networkId","deployedNetwork","networks","Error","eth","Contract","abi","address"],"sources":["C:/Users/bhija/Downloads/decentralized-mail/src/utils/contract.js"],"sourcesContent":["import Web3 from 'web3';\r\nimport mailContractData from './DecentralizedMail.json';\r\n\r\nlet web3Instance;\r\nlet mailContract;\r\n\r\nexport const initWeb3 = async () => {\r\n    if (web3Instance) return web3Instance;\r\n\r\n    if (window.ethereum) {\r\n        web3Instance = new Web3(window.ethereum);\r\n        try {\r\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        } catch (error) {\r\n            console.error('User denied account access');\r\n        }\r\n    } else if (window.web3) {\r\n        web3Instance = new Web3(window.web3.currentProvider);\r\n    } else {\r\n        const provider = new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co');\r\n        web3Instance = new Web3(provider);\r\n    }\r\n    return web3Instance;\r\n};\r\n\r\nexport const getWeb3 = () => {\r\n    return web3Instance;\r\n};\r\n\r\nexport const getContract = async () => {\r\n    if (mailContract) return mailContract;\r\n\r\n    const web3 = await initWeb3();\r\n    const networkId = '31'; // RSK Testnet network ID\r\n    const deployedNetwork = mailContractData.networks[networkId];\r\n    if (!deployedNetwork) {\r\n        throw new Error('Contract not deployed on the RSK Testnet');\r\n    }\r\n    mailContract = new web3.eth.Contract(\r\n        mailContractData.abi,\r\n        deployedNetwork.address\r\n    );\r\n\r\n    return mailContract;\r\n};\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,gBAAgB,MAAM,0BAA0B;AAEvD,IAAIC,YAAY;AAChB,IAAIC,YAAY;AAEhB,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAIF,YAAY,EAAE,OAAOA,YAAY;EAErC,IAAIG,MAAM,CAACC,QAAQ,EAAE;IACjBJ,YAAY,GAAG,IAAIF,IAAI,CAACK,MAAM,CAACC,QAAQ,CAAC;IACxC,IAAI;MACA,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;IACpE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACJ,CAAC,MAAM,IAAIJ,MAAM,CAACM,IAAI,EAAE;IACpBT,YAAY,GAAG,IAAIF,IAAI,CAACK,MAAM,CAACM,IAAI,CAACC,eAAe,CAAC;EACxD,CAAC,MAAM;IACH,MAAMC,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAS,CAACC,YAAY,CAAC,oCAAoC,CAAC;IACtFb,YAAY,GAAG,IAAIF,IAAI,CAACa,QAAQ,CAAC;EACrC;EACA,OAAOX,YAAY;AACvB,CAAC;AAED,OAAO,MAAMc,OAAO,GAAGA,CAAA,KAAM;EACzB,OAAOd,YAAY;AACvB,CAAC;AAED,OAAO,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAId,YAAY,EAAE,OAAOA,YAAY;EAErC,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAAC,CAAC;EAC7B,MAAMc,SAAS,GAAG,IAAI,CAAC,CAAC;EACxB,MAAMC,eAAe,GAAGlB,gBAAgB,CAACmB,QAAQ,CAACF,SAAS,CAAC;EAC5D,IAAI,CAACC,eAAe,EAAE;IAClB,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;EAC/D;EACAlB,YAAY,GAAG,IAAIQ,IAAI,CAACW,GAAG,CAACC,QAAQ,CAChCtB,gBAAgB,CAACuB,GAAG,EACpBL,eAAe,CAACM,OACpB,CAAC;EAED,OAAOtB,YAAY;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}