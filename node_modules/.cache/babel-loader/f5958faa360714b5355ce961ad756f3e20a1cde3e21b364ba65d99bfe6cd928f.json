{"ast":null,"code":"import Web3 from 'web3';\nimport mailContractData from './DecentralizedMail.json';\nlet web3Instance;\nlet mailContract;\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    if (web3Instance) return resolve(web3Instance);\n    if (window.ethereum) {\n      web3Instance = new Web3(window.ethereum);\n      try {\n        window.ethereum.enable().then(() => {\n          console.log('Ethereum enabled');\n          resolve(web3Instance);\n        }).catch(error => {\n          console.error('Error enabling Ethereum', error);\n          reject(error);\n        });\n      } catch (error) {\n        console.error('Error with Ethereum', error);\n        reject(error);\n      }\n    } else if (window.web3) {\n      web3Instance = new Web3(window.web3.currentProvider);\n      console.log('Using web3 current provider');\n      resolve(web3Instance);\n    } else {\n      const provider = new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co');\n      web3Instance = new Web3(provider);\n      console.log('Using HTTP provider');\n      resolve(web3Instance);\n    }\n  });\n};\nconst getContract = async web3 => {\n  if (mailContract) return mailContract;\n  const networkId = await web3.eth.net.getId();\n  console.log('Network ID:', networkId);\n  const deployedNetwork = mailContractData.networks[networkId];\n  if (!deployedNetwork) {\n    throw new Error('Contract not deployed on the current network');\n  }\n  mailContract = new web3.eth.Contract(mailContractData.abi, deployedNetwork.address);\n  console.log('Contract address:', deployedNetwork.address);\n  return mailContract;\n};\nexport { getWeb3, getContract };","map":{"version":3,"names":["Web3","mailContractData","web3Instance","mailContract","getWeb3","Promise","resolve","reject","window","ethereum","enable","then","console","log","catch","error","web3","currentProvider","provider","providers","HttpProvider","getContract","networkId","eth","net","getId","deployedNetwork","networks","Error","Contract","abi","address"],"sources":["C:/Users/bhija/Downloads/decentralized-mail/src/utils/contract.js"],"sourcesContent":["import Web3 from 'web3';\r\nimport mailContractData from './DecentralizedMail.json';\r\n\r\nlet web3Instance;\r\nlet mailContract;\r\n\r\nconst getWeb3 = () => {\r\n    return new Promise((resolve, reject) => {\r\n        if (web3Instance) return resolve(web3Instance);\r\n\r\n        if (window.ethereum) {\r\n            web3Instance = new Web3(window.ethereum);\r\n            try {\r\n                window.ethereum.enable().then(() => {\r\n                    console.log('Ethereum enabled');\r\n                    resolve(web3Instance);\r\n                }).catch((error) => {\r\n                    console.error('Error enabling Ethereum', error);\r\n                    reject(error);\r\n                });\r\n            } catch (error) {\r\n                console.error('Error with Ethereum', error);\r\n                reject(error);\r\n            }\r\n        } else if (window.web3) {\r\n            web3Instance = new Web3(window.web3.currentProvider);\r\n            console.log('Using web3 current provider');\r\n            resolve(web3Instance);\r\n        } else {\r\n            const provider = new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co');\r\n            web3Instance = new Web3(provider);\r\n            console.log('Using HTTP provider');\r\n            resolve(web3Instance);\r\n        }\r\n    });\r\n};\r\n\r\nconst getContract = async (web3) => {\r\n    if (mailContract) return mailContract;\r\n\r\n    const networkId = await web3.eth.net.getId();\r\n    console.log('Network ID:', networkId);\r\n    const deployedNetwork = mailContractData.networks[networkId];\r\n    if (!deployedNetwork) {\r\n        throw new Error('Contract not deployed on the current network');\r\n    }\r\n    mailContract = new web3.eth.Contract(\r\n        mailContractData.abi,\r\n        deployedNetwork.address\r\n    );\r\n    console.log('Contract address:', deployedNetwork.address);\r\n\r\n    return mailContract;\r\n};\r\n\r\nexport { getWeb3, getContract };\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,gBAAgB,MAAM,0BAA0B;AAEvD,IAAIC,YAAY;AAChB,IAAIC,YAAY;AAEhB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAClB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,IAAIL,YAAY,EAAE,OAAOI,OAAO,CAACJ,YAAY,CAAC;IAE9C,IAAIM,MAAM,CAACC,QAAQ,EAAE;MACjBP,YAAY,GAAG,IAAIF,IAAI,CAACQ,MAAM,CAACC,QAAQ,CAAC;MACxC,IAAI;QACAD,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;UAChCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;UAC/BP,OAAO,CAACJ,YAAY,CAAC;QACzB,CAAC,CAAC,CAACY,KAAK,CAAEC,KAAK,IAAK;UAChBH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/CR,MAAM,CAACQ,KAAK,CAAC;QACjB,CAAC,CAAC;MACN,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3CR,MAAM,CAACQ,KAAK,CAAC;MACjB;IACJ,CAAC,MAAM,IAAIP,MAAM,CAACQ,IAAI,EAAE;MACpBd,YAAY,GAAG,IAAIF,IAAI,CAACQ,MAAM,CAACQ,IAAI,CAACC,eAAe,CAAC;MACpDL,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CP,OAAO,CAACJ,YAAY,CAAC;IACzB,CAAC,MAAM;MACH,MAAMgB,QAAQ,GAAG,IAAIlB,IAAI,CAACmB,SAAS,CAACC,YAAY,CAAC,oCAAoC,CAAC;MACtFlB,YAAY,GAAG,IAAIF,IAAI,CAACkB,QAAQ,CAAC;MACjCN,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCP,OAAO,CAACJ,YAAY,CAAC;IACzB;EACJ,CAAC,CAAC;AACN,CAAC;AAED,MAAMmB,WAAW,GAAG,MAAOL,IAAI,IAAK;EAChC,IAAIb,YAAY,EAAE,OAAOA,YAAY;EAErC,MAAMmB,SAAS,GAAG,MAAMN,IAAI,CAACO,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;EAC5Cb,OAAO,CAACC,GAAG,CAAC,aAAa,EAAES,SAAS,CAAC;EACrC,MAAMI,eAAe,GAAGzB,gBAAgB,CAAC0B,QAAQ,CAACL,SAAS,CAAC;EAC5D,IAAI,CAACI,eAAe,EAAE;IAClB,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;EACnE;EACAzB,YAAY,GAAG,IAAIa,IAAI,CAACO,GAAG,CAACM,QAAQ,CAChC5B,gBAAgB,CAAC6B,GAAG,EACpBJ,eAAe,CAACK,OACpB,CAAC;EACDnB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEa,eAAe,CAACK,OAAO,CAAC;EAEzD,OAAO5B,YAAY;AACvB,CAAC;AAED,SAASC,OAAO,EAAEiB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}