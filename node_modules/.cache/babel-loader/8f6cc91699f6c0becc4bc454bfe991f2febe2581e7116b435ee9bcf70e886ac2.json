{"ast":null,"code":"import Web3 from 'web3';\nimport mailContractData from '../utils/DecentralizedMail.json';\nlet web3Instance;\nlet mailContract;\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    if (web3Instance) return resolve(web3Instance);\n    if (window.ethereum) {\n      web3Instance = new Web3(window.ethereum);\n      try {\n        window.ethereum.enable().then(() => {\n          resolve(web3Instance);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    } else if (window.web3) {\n      web3Instance = new Web3(window.web3.currentProvider);\n      resolve(web3Instance);\n    } else {\n      const provider = new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co');\n      web3Instance = new Web3(provider);\n      resolve(web3Instance);\n    }\n  });\n};\nconst getContract = async web3 => {\n  if (mailContract) return mailContract;\n  const networkId = '31'; // RSK Testnet network ID\n  const deployedNetwork = mailContractData.networks[networkId];\n  mailContract = new web3.eth.Contract(mailContractData.abi, deployedNetwork && deployedNetwork.address);\n  return mailContract;\n};\nexport { getWeb3, getContract };","map":{"version":3,"names":["Web3","mailContractData","web3Instance","mailContract","getWeb3","Promise","resolve","reject","window","ethereum","enable","then","error","web3","currentProvider","provider","providers","HttpProvider","getContract","networkId","deployedNetwork","networks","eth","Contract","abi","address"],"sources":["C:/Users/bhija/Downloads/decentralized-mail/src/utils/contract.js"],"sourcesContent":["import Web3 from 'web3';\r\nimport mailContractData from '../utils/DecentralizedMail.json';\r\n\r\nlet web3Instance;\r\nlet mailContract;\r\n\r\nconst getWeb3 = () => {\r\n    return new Promise((resolve, reject) => {\r\n        if (web3Instance) return resolve(web3Instance);\r\n\r\n        if (window.ethereum) {\r\n            web3Instance = new Web3(window.ethereum);\r\n            try {\r\n                window.ethereum.enable().then(() => {\r\n                    resolve(web3Instance);\r\n                });\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        } else if (window.web3) {\r\n            web3Instance = new Web3(window.web3.currentProvider);\r\n            resolve(web3Instance);\r\n        } else {\r\n            const provider = new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co');\r\n            web3Instance = new Web3(provider);\r\n            resolve(web3Instance);\r\n        }\r\n    });\r\n};\r\n\r\nconst getContract = async (web3) => {\r\n    if (mailContract) return mailContract;\r\n\r\n    const networkId = '31'; // RSK Testnet network ID\r\n    const deployedNetwork = mailContractData.networks[networkId];\r\n    mailContract = new web3.eth.Contract(\r\n        mailContractData.abi,\r\n        deployedNetwork && deployedNetwork.address\r\n    );\r\n\r\n    return mailContract;\r\n};\r\n\r\nexport { getWeb3, getContract };\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,gBAAgB,MAAM,iCAAiC;AAE9D,IAAIC,YAAY;AAChB,IAAIC,YAAY;AAEhB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAClB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,IAAIL,YAAY,EAAE,OAAOI,OAAO,CAACJ,YAAY,CAAC;IAE9C,IAAIM,MAAM,CAACC,QAAQ,EAAE;MACjBP,YAAY,GAAG,IAAIF,IAAI,CAACQ,MAAM,CAACC,QAAQ,CAAC;MACxC,IAAI;QACAD,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;UAChCL,OAAO,CAACJ,YAAY,CAAC;QACzB,CAAC,CAAC;MACN,CAAC,CAAC,OAAOU,KAAK,EAAE;QACZL,MAAM,CAACK,KAAK,CAAC;MACjB;IACJ,CAAC,MAAM,IAAIJ,MAAM,CAACK,IAAI,EAAE;MACpBX,YAAY,GAAG,IAAIF,IAAI,CAACQ,MAAM,CAACK,IAAI,CAACC,eAAe,CAAC;MACpDR,OAAO,CAACJ,YAAY,CAAC;IACzB,CAAC,MAAM;MACH,MAAMa,QAAQ,GAAG,IAAIf,IAAI,CAACgB,SAAS,CAACC,YAAY,CAAC,oCAAoC,CAAC;MACtFf,YAAY,GAAG,IAAIF,IAAI,CAACe,QAAQ,CAAC;MACjCT,OAAO,CAACJ,YAAY,CAAC;IACzB;EACJ,CAAC,CAAC;AACN,CAAC;AAED,MAAMgB,WAAW,GAAG,MAAOL,IAAI,IAAK;EAChC,IAAIV,YAAY,EAAE,OAAOA,YAAY;EAErC,MAAMgB,SAAS,GAAG,IAAI,CAAC,CAAC;EACxB,MAAMC,eAAe,GAAGnB,gBAAgB,CAACoB,QAAQ,CAACF,SAAS,CAAC;EAC5DhB,YAAY,GAAG,IAAIU,IAAI,CAACS,GAAG,CAACC,QAAQ,CAChCtB,gBAAgB,CAACuB,GAAG,EACpBJ,eAAe,IAAIA,eAAe,CAACK,OACvC,CAAC;EAED,OAAOtB,YAAY;AACvB,CAAC;AAED,SAASC,OAAO,EAAEc,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}