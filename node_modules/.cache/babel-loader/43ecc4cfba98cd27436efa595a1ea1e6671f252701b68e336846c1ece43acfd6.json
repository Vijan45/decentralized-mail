{"ast":null,"code":"import Web3 from 'web3';\nimport mailContractData from './DecentralizedMail.json';\nlet web3Instance;\nlet mailContract;\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    if (web3Instance) return resolve(web3Instance);\n    if (window.ethereum) {\n      web3Instance = new Web3(window.ethereum);\n      window.ethereum.enable().then(() => {\n        console.log('Ethereum enabled');\n        resolve(web3Instance);\n      }).catch(error => {\n        console.error('User denied account access', error);\n        reject(error);\n      });\n    } else if (window.web3) {\n      web3Instance = new Web3(window.web3.currentProvider);\n      console.log('Using legacy Web3 provider');\n      resolve(web3Instance);\n    } else {\n      const provider = new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co');\n      web3Instance = new Web3(provider);\n      console.log('Using HTTP provider');\n      resolve(web3Instance);\n    }\n  });\n};\nconst getContract = async web3 => {\n  if (mailContract) return mailContract;\n  try {\n    const networkId = await web3.eth.net.getId();\n    console.log('Network ID:', networkId);\n    const deployedNetwork = mailContractData.networks[networkId];\n    if (!deployedNetwork) {\n      throw new Error('Contract not deployed on the current network');\n    }\n    mailContract = new web3.eth.Contract(mailContractData.abi, deployedNetwork.address);\n    console.log('Contract instance created');\n  } catch (error) {\n    console.error('Error getting contract instance', error);\n    throw error;\n  }\n  return mailContract;\n};\nexport { getWeb3, getContract };","map":{"version":3,"names":["Web3","mailContractData","web3Instance","mailContract","getWeb3","Promise","resolve","reject","window","ethereum","enable","then","console","log","catch","error","web3","currentProvider","provider","providers","HttpProvider","getContract","networkId","eth","net","getId","deployedNetwork","networks","Error","Contract","abi","address"],"sources":["C:/Users/bhija/Downloads/decentralized-mail/src/utils/contract.js"],"sourcesContent":["import Web3 from 'web3';\r\nimport mailContractData from './DecentralizedMail.json';\r\n\r\nlet web3Instance;\r\nlet mailContract;\r\n\r\nconst getWeb3 = () => {\r\n    return new Promise((resolve, reject) => {\r\n        if (web3Instance) return resolve(web3Instance);\r\n\r\n        if (window.ethereum) {\r\n            web3Instance = new Web3(window.ethereum);\r\n            window.ethereum.enable().then(() => {\r\n                console.log('Ethereum enabled');\r\n                resolve(web3Instance);\r\n            }).catch((error) => {\r\n                console.error('User denied account access', error);\r\n                reject(error);\r\n            });\r\n        } else if (window.web3) {\r\n            web3Instance = new Web3(window.web3.currentProvider);\r\n            console.log('Using legacy Web3 provider');\r\n            resolve(web3Instance);\r\n        } else {\r\n            const provider = new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co');\r\n            web3Instance = new Web3(provider);\r\n            console.log('Using HTTP provider');\r\n            resolve(web3Instance);\r\n        }\r\n    });\r\n};\r\n\r\nconst getContract = async (web3) => {\r\n    if (mailContract) return mailContract;\r\n\r\n    try {\r\n        const networkId = await web3.eth.net.getId();\r\n        console.log('Network ID:', networkId);\r\n        const deployedNetwork = mailContractData.networks[networkId];\r\n        if (!deployedNetwork) {\r\n            throw new Error('Contract not deployed on the current network');\r\n        }\r\n        mailContract = new web3.eth.Contract(\r\n            mailContractData.abi,\r\n            deployedNetwork.address\r\n        );\r\n        console.log('Contract instance created');\r\n    } catch (error) {\r\n        console.error('Error getting contract instance', error);\r\n        throw error;\r\n    }\r\n\r\n    return mailContract;\r\n};\r\n\r\nexport { getWeb3, getContract };\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,gBAAgB,MAAM,0BAA0B;AAEvD,IAAIC,YAAY;AAChB,IAAIC,YAAY;AAEhB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAClB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,IAAIL,YAAY,EAAE,OAAOI,OAAO,CAACJ,YAAY,CAAC;IAE9C,IAAIM,MAAM,CAACC,QAAQ,EAAE;MACjBP,YAAY,GAAG,IAAIF,IAAI,CAACQ,MAAM,CAACC,QAAQ,CAAC;MACxCD,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;QAChCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/BP,OAAO,CAACJ,YAAY,CAAC;MACzB,CAAC,CAAC,CAACY,KAAK,CAAEC,KAAK,IAAK;QAChBH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDR,MAAM,CAACQ,KAAK,CAAC;MACjB,CAAC,CAAC;IACN,CAAC,MAAM,IAAIP,MAAM,CAACQ,IAAI,EAAE;MACpBd,YAAY,GAAG,IAAIF,IAAI,CAACQ,MAAM,CAACQ,IAAI,CAACC,eAAe,CAAC;MACpDL,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzCP,OAAO,CAACJ,YAAY,CAAC;IACzB,CAAC,MAAM;MACH,MAAMgB,QAAQ,GAAG,IAAIlB,IAAI,CAACmB,SAAS,CAACC,YAAY,CAAC,oCAAoC,CAAC;MACtFlB,YAAY,GAAG,IAAIF,IAAI,CAACkB,QAAQ,CAAC;MACjCN,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCP,OAAO,CAACJ,YAAY,CAAC;IACzB;EACJ,CAAC,CAAC;AACN,CAAC;AAED,MAAMmB,WAAW,GAAG,MAAOL,IAAI,IAAK;EAChC,IAAIb,YAAY,EAAE,OAAOA,YAAY;EAErC,IAAI;IACA,MAAMmB,SAAS,GAAG,MAAMN,IAAI,CAACO,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;IAC5Cb,OAAO,CAACC,GAAG,CAAC,aAAa,EAAES,SAAS,CAAC;IACrC,MAAMI,eAAe,GAAGzB,gBAAgB,CAAC0B,QAAQ,CAACL,SAAS,CAAC;IAC5D,IAAI,CAACI,eAAe,EAAE;MAClB,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;IACnE;IACAzB,YAAY,GAAG,IAAIa,IAAI,CAACO,GAAG,CAACM,QAAQ,CAChC5B,gBAAgB,CAAC6B,GAAG,EACpBJ,eAAe,CAACK,OACpB,CAAC;IACDnB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EAC5C,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACf;EAEA,OAAOZ,YAAY;AACvB,CAAC;AAED,SAASC,OAAO,EAAEiB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}